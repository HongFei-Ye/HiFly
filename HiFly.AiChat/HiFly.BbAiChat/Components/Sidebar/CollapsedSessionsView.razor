@using Microsoft.AspNetCore.Components

<div class="collapsed-actions">
    <button class="collapsed-new-btn" 
            @onclick="HandleNewChat"
            title="新建对话">
        <div class="collapsed-btn-bg"></div>
        <i class="fas fa-plus"></i>
    </button>
    
    <div class="collapsed-divider"></div>
    
    <div class="@GetCollapsedSessionsClass()">
        @foreach (var session in VisibleSessions)
        {
            <div class="collapsed-session-item @(session.Id == CurrentSessionId ? "active" : "")"
                 @onclick="() => HandleSessionSelected(session.Id)"
                 title="@session.Title">
                <div class="collapsed-session-bg"></div>
                <div class="collapsed-session-icon">
                    <i class="fas fa-comment-dots"></i>
                </div>
                @if (session.Id == CurrentSessionId)
                {
                    <div class="collapsed-session-pulse"></div>
                }
            </div>
        }
        
        @if (ShouldShowMoreIndicator)
        {
            <div class="collapsed-more-indicator" 
                 title="还有 @RemainingSessionsCount 个对话，点击展开查看更多">
                <i class="fas fa-ellipsis-v"></i>
                <span class="more-count">+@RemainingSessionsCount</span>
            </div>
        }
    </div>
</div>

@code {
    /// <summary>
    /// 会话列表
    /// </summary>
    [Parameter]
    public List<ChatSession> Sessions { get; set; } = new();

    /// <summary>
    /// 当前会话ID
    /// </summary>
    [Parameter]
    public string CurrentSessionId { get; set; } = string.Empty;

    /// <summary>
    /// 最大可见会话数
    /// </summary>
    [Parameter]
    public int MaxVisibleSessions { get; set; } = 8;

    /// <summary>
    /// 选择会话事件
    /// </summary>
    [Parameter]
    public EventCallback<string> OnSessionSelected { get; set; }

    /// <summary>
    /// 新建对话事件
    /// </summary>
    [Parameter]
    public EventCallback OnNewChat { get; set; }

    /// <summary>
    /// 获取可见的会话列表
    /// </summary>
    private List<ChatSession> VisibleSessions => Sessions.Take(GetMaxVisibleSessions()).ToList();

    /// <summary>
    /// 是否显示更多指示器
    /// </summary>
    private bool ShouldShowMoreIndicator => Sessions.Count > GetMaxVisibleSessions();

    /// <summary>
    /// 剩余会话数量
    /// </summary>
    private int RemainingSessionsCount => Math.Max(0, Sessions.Count - GetMaxVisibleSessions());

    /// <summary>
    /// 获取最大可见会话数
    /// </summary>
    private int GetMaxVisibleSessions()
    {
        // 如果会话总数超过计算的最大值，就显示计算值-1，为"更多"指示器预留空间
        if (Sessions.Count > MaxVisibleSessions)
        {
            return Math.Max(1, MaxVisibleSessions - 1); // 确保至少显示1个
        }
        else
        {
            // 如果会话总数不超过最大值，显示所有会话，不需要"更多"指示器
            return Sessions.Count;
        }
    }

    /// <summary>
    /// 获取折叠会话容器的CSS类
    /// </summary>
    private string GetCollapsedSessionsClass()
    {
        return "collapsed-sessions";
    }

    private async Task HandleSessionSelected(string sessionId)
    {
        if (OnSessionSelected.HasDelegate)
        {
            await OnSessionSelected.InvokeAsync(sessionId);
        }
    }

    private async Task HandleNewChat()
    {
        if (OnNewChat.HasDelegate)
        {
            await OnNewChat.InvokeAsync();
        }
    }
}