@using Microsoft.AspNetCore.Components

@if (EnableWidthResize && WidthPresets.Any())
{
    <div class="width-controls">
        <button class="width-preset-btn @(_showWidthPresetMenu ? "active" : "")" 
                @onclick="ToggleWidthPresetMenu"
                title="调整面板宽度">
            <i class="fas fa-arrows-alt-h"></i>
        </button>
        
        @if (_showWidthPresetMenu)
        {
            <div class="width-preset-menu">
                <div class="preset-menu-header">
                    <span class="preset-title">面板宽度</span>
                    <div class="current-width">@CurrentWidth</div>
                </div>
                <div class="preset-options">
                    @foreach (var preset in WidthPresets)
                    {
                        <button class="preset-option @(GetActiveClass(preset))"
                                @onclick="() => SelectWidthPreset(preset)">
                            <i class="@preset.Icon"></i>
                            <span class="preset-name">@preset.Name</span>
                            <span class="preset-width">@preset.Width</span>
                        </button>
                    }
                </div>
            </div>
        }
    </div>
}

@code {
    /// <summary>
    /// 是否启用宽度调整
    /// </summary>
    [Parameter]
    public bool EnableWidthResize { get; set; } = true;

    /// <summary>
    /// 当前宽度
    /// </summary>
    [Parameter]
    public string CurrentWidth { get; set; } = "320px";

    /// <summary>
    /// 预设宽度选项
    /// </summary>
    [Parameter]
    public List<SidebarWidthPreset> WidthPresets { get; set; } = new();

    /// <summary>
    /// 宽度选择事件
    /// </summary>
    [Parameter]
    public EventCallback<SidebarWidthPreset> OnWidthPresetSelected { get; set; }

    private bool _showWidthPresetMenu = false;

    /// <summary>
    /// 获取激活状态的CSS类
    /// </summary>
    /// <param name="preset">预设选项</param>
    /// <returns>CSS类名</returns>
    private string GetActiveClass(SidebarWidthPreset preset)
    {
        // 增强的匹配逻辑，处理可能的空格和大小写问题
        var isActive = string.Equals(
            CurrentWidth?.Trim(), 
            preset.Width?.Trim(), 
            StringComparison.OrdinalIgnoreCase
        );
        
        return isActive ? "active" : "";
    }

    /// <summary>
    /// 切换宽度预设菜单显示状态
    /// </summary>
    private void ToggleWidthPresetMenu()
    {
        _showWidthPresetMenu = !_showWidthPresetMenu;
    }

    /// <summary>
    /// 选择预设宽度
    /// </summary>
    /// <param name="preset">预设选项</param>
    private async Task SelectWidthPreset(SidebarWidthPreset preset)
    {
        if (OnWidthPresetSelected.HasDelegate)
        {
            await OnWidthPresetSelected.InvokeAsync(preset);
        }
        
        // 关闭菜单
        _showWidthPresetMenu = false;
        
        // 强制重新渲染以确保立即更新视觉效果
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        
        // 当参数变化时强制重新渲染
        InvokeAsync(StateHasChanged);
    }
}