@* Copyright (c) 弘飞帮联科技有限公司. All rights reserved. *@
@* 官方网站: www.hongfei8.cn *@
@* 联系方式: felix@hongfei8.com 或 hongfei8@outlook.com *@

@page "/frontchannel-logout"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="logout-container">
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">正在登出...</span>
        </div>
        <p class="mt-3">正在完成登出流程...</p>
    </div>
</div>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // 获取查询参数
                var uri = new Uri(NavigationManager.Uri);
                var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
                
                var sid = query.TryGetValue("sid", out var sidValue) ? sidValue.ToString() : null;
                var iss = query.TryGetValue("iss", out var issValue) ? issValue.ToString() : null;

                // 验证参数
                if (string.IsNullOrEmpty(sid) || string.IsNullOrEmpty(iss))
                {
                    await HandleLogoutError("缺少必要的登出参数");
                    return;
                }

                // 检查当前用户的会话ID是否匹配
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                if (authState.User.Identity?.IsAuthenticated == true)
                {
                    var currentSid = authState.User.FindFirst("sid")?.Value;
                    if (!string.IsNullOrEmpty(currentSid) && currentSid == sid)
                    {
                        // 会话ID匹配，执行登出
                        await PerformLogout();
                    }
                }

                // 通知父窗口登出完成
                await JSRuntime.InvokeVoidAsync("notifyLogoutComplete");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"前端通道登出错误: {ex.Message}");
                await HandleLogoutError($"登出过程中发生错误: {ex.Message}");
            }
        }
    }

    private async Task PerformLogout()
    {
        try
        {
            // 清除本地认证状态
            NavigationManager.NavigateTo("/signout", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"执行登出时发生错误: {ex.Message}");
        }
    }

    private async Task HandleLogoutError(string errorMessage)
    {
        Console.WriteLine($"前端通道登出错误: {errorMessage}");
        
        // 可以在这里添加错误处理逻辑
        // 例如显示错误消息或重定向到错误页面
        
        await Task.Delay(2000); // 等待2秒后关闭
        await JSRuntime.InvokeVoidAsync("window.close");
    }
}

<script>
    window.notifyLogoutComplete = function() {
        // 通知父窗口登出完成
        if (window.parent && window.parent !== window) {
            window.parent.postMessage('logout-complete', '*');
        }
        
        // 延迟关闭窗口
        setTimeout(function() {
            window.close();
        }, 1000);
    };
    
    // 监听来自认证服务器的消息
    window.addEventListener('message', function(event) {
        if (event.data === 'logout-request') {
            // 处理登出请求
            notifyLogoutComplete();
        }
    });
</script>

<style>
    .logout-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #f8f9fa;
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
    }

    .visually-hidden {
        position: absolute !important;
        width: 1px !important;
        height: 1px !important;
        padding: 0 !important;
        margin: -1px !important;
        overflow: hidden !important;
        clip: rect(0, 0, 0, 0) !important;
        white-space: nowrap !important;
        border: 0 !important;
    }
</style>
