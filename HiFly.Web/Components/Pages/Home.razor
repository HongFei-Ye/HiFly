@page "/"

@rendermode InteractiveServer
@using HiFly.BbAiChat.Components
@using HiFly.BbAiChat.Components.Messages
@using HiFly.BbAiChat.Components.Sidebar

<PageTitle>AI智能对话</PageTitle>

<div style="height: 100vh; display: flex; flex-direction: column;">

    <!-- AI聊天组件 -->
    <div style="flex: 1; overflow: hidden;">
        <AiChatComponentV2 Title="HiFly AI助手"
                           ShowLeftPanel="true"
                           IsLeftPanelCollapsed="isLeftPanelCollapsed"
                           OnMessageSent="HandleMessageSent"
                           OnChatCleared="HandleChatCleared"
                           OnNewChatCreated="HandleNewChat"
                           OnSessionSelected="HandleSessionSelected"
                           OnSessionDeleted="HandleDeleteSession"
                           OnLeftPanelCollapsedChanged="HandleLeftPanelCollapsedChanged"
                           OnRightPanelVisibilityChanged="HandleRightPanelVisibilityChanged"
                           OnModelChanged="HandleModelChanged"
                           OnTemperatureChanged="HandleTemperatureChanged"
                           @ref="chatComponent">
            
            <!-- 自定义左侧面板模板，展示动态宽度功能 -->
            <SidebarTemplate>
                <AiChatSidebar IsCollapsed="isLeftPanelCollapsed"
                               Width="@currentWidth"
                               MinWidth="200"
                               MaxWidth="500"
                               EnableWidthResize="true"
                               ShowResizeHandle="true"
                               Sessions="@GetMockSessions()"
                               CurrentSessionId="@currentSessionId"
                               MessageCount="@messageCount"
                               OnNewChat="HandleNewChat"
                               OnCollapsedChanged="HandleLeftPanelCollapsedChanged"
                               OnSessionSelected="HandleSessionSelected"
                               OnEditSession="HandleEditSession"
                               OnDeleteSession="HandleDeleteSession"
                               OnWidthChanged="HandleSidebarWidthChanged"
                               WidthPresets="@GetCustomWidthPresets()" />
            </SidebarTemplate>
        </AiChatComponentV2>
    </div>

</div>

@code {
    private AiChatComponentV2? chatComponent;
    private bool isLeftPanelCollapsed = false;
    private string currentWidth = "320px";
    private string currentSessionId = "session-1";
    private int messageCount = 0;

    private async Task HandleMessageSent(string message)
    {
        messageCount++;
        
        // 设置加载状态
        if (chatComponent != null)
        {
            chatComponent.SetLoading(true);
        }

        try
        {
            // 模拟AI响应
            await Task.Delay(1500); // 模拟处理时间

            // 这里应该调用实际的AI API
            var aiResponse = await SimulateAiResponse(message);

            if (chatComponent != null)
            {
                await chatComponent.AddMessage(aiResponse, false);
                messageCount++;
            }
        }
        catch (Exception ex)
        {
            // 处理错误
            if (chatComponent != null)
            {
                await chatComponent.AddMessage($"抱歉，处理消息时出现错误：{ex.Message}", false);
                messageCount++;
            }
        }
        finally
        {
            // 清除加载状态
            if (chatComponent != null)
            {
                chatComponent.SetLoading(false);
            }
        }
    }

    private async Task HandleSidebarWidthChanged(string newWidth)
    {
        currentWidth = newWidth;
        await SaveUserPreference("sidebarWidth", newWidth);
        
        // 强制重新渲染以确保UI立即更新
        StateHasChanged();
    }

    private async Task SetSidebarWidth(string width)
    {
        currentWidth = width;
        await SaveUserPreference("sidebarWidth", width);
        StateHasChanged();
    }

    /// <summary>
    /// 处理右侧面板可见性变化
    /// </summary>
    private async Task HandleRightPanelVisibilityChanged(bool isVisible)
    {
        // 可以在这里保存用户的面板偏好设置
        await SaveUserPreference("rightPanelVisible", isVisible);
    }

    private List<SidebarWidthPreset> GetCustomWidthPresets()
    {
        return new List<SidebarWidthPreset>
        {
            new("紧凑", "280px", "fas fa-align-justify"),
            new("标准", "320px", "fas fa-expand"),
            new("宽松", "380px", "fas fa-expand-arrows-alt"),
            new("超宽", "450px", "fas fa-arrows-alt-h")
        };
    }

    private List<ChatSession> GetMockSessions()
    {
        return Enumerable.Range(1, 25).Select(i => new ChatSession
        {
            Id = $"session-{i}",
            Title = i switch
            {
                1 => "AI编程助手使用指南",
                2 => "深度学习入门教程",
                3 => "如何优化代码性能",
                4 => "机器学习算法对比",
                5 => "数据结构与算法",
                6 => "前端开发最佳实践",
                7 => "云计算架构设计",
                8 => "微服务架构模式",
                9 => "DevOps实践经验",
                10 => "人工智能发展趋势",
                _ => $"对话会话 #{i}"
            },
            CreateTime = DateTime.Now.AddDays(-i),
            LastUpdateTime = DateTime.Now.AddDays(-i + 0.5),
            MessageCount = Random.Shared.Next(3, 50)
        }).ToList();
    }

    private async Task HandleChatCleared()
    {
        messageCount = 0;
        if (chatComponent != null)
        {
            await chatComponent.ClearMessages();
        }
        await Task.CompletedTask;
    }

    private async Task HandleNewChat()
    {
        messageCount = 0;
        currentSessionId = $"session-{DateTime.Now.Ticks}";

        if (chatComponent != null)
        {
            await chatComponent.ClearMessages();
        }
        await Task.CompletedTask;
    }

    private async Task HandleSessionSelected(string sessionId)
    {
        currentSessionId = sessionId;
        var historyMessages = await LoadSessionHistory(sessionId);
        messageCount = historyMessages.Count;

        if (chatComponent != null && historyMessages.Any())
        {
            await chatComponent.SetMessages(historyMessages);
        }
        await Task.CompletedTask;
    }

    private async Task HandleEditSession(string sessionId)
    {
        // 处理编辑会话的逻辑
        await Task.CompletedTask;
    }

    private async Task HandleDeleteSession(string sessionId)
    {
        await DeleteSessionFromDatabase(sessionId);
        if (currentSessionId == sessionId)
        {
            // 如果删除的是当前会话，清空消息
            messageCount = 0;
            if (chatComponent != null)
            {
                await chatComponent.ClearMessages();
            }
        }
        await Task.CompletedTask;
    }

    private async Task HandleLeftPanelCollapsedChanged(bool isCollapsed)
    {
        isLeftPanelCollapsed = isCollapsed;
        await SaveUserPreference("leftPanelCollapsed", isCollapsed);
        await Task.CompletedTask;
    }

    private async Task HandleModelChanged(string modelId)
    {
        await UpdateAiModelConfiguration(modelId);
        await Task.CompletedTask;
    }

    private async Task HandleTemperatureChanged(double temperature)
    {
        await UpdateAiTemperatureConfiguration(temperature);
        await Task.CompletedTask;
    }

    private async Task<string> SimulateAiResponse(string userMessage)
    {
        // 模拟AI响应逻辑
        var responses = new[]
        {
            $"您好！关于「{userMessage}」这个话题，我来详细为您解答：\n\n**🎯 核心要点**\n- 这是一个很有意思的问题\n- 涉及多个层面的考虑\n- 需要结合实际情况分析\n\n**💡 我的建议**\n1. 首先了解基础概念\n2. 然后结合实际应用\n3. 最后关注最新发展\n\n您还有其他想了解的吗？",
            
            $"关于「{userMessage}」，让我从技术角度为您分析：\n\n```markdown\n## 技术要点\n- 核心原理：详细说明\n- 应用场景：实际案例\n- 最佳实践：经验总结\n\n## 实施步骤\n1. 准备阶段\n2. 实施阶段  \n3. 优化阶段\n```\n\n希望这个分析对您有帮助！",
            
            $"您提到的「{userMessage}」确实值得深入探讨！\n\n🔍 **多维度分析**\n\n| 维度 | 要点 | 建议 |\n|------|------|------|\n| 技术层面 | 核心实现 | 关注最新技术 |\n| 实用层面 | 应用价值 | 结合实际需求 |\n| 发展趋势 | 未来方向 | 持续学习更新 |\n\n**💪 行动建议**\n- 理论与实践相结合\n- 持续关注行业动态\n- 积极参与技术社区\n\n期待与您进一步交流！"
        };

        var random = new Random();
        var response = responses[random.Next(responses.Length)];
        await Task.CompletedTask;
        return response;
    }

    // 辅助方法
    private async Task<List<ChatMessage>> LoadSessionHistory(string sessionId)
    {
        await Task.Delay(100);
        
        var sessionNumber = sessionId.Replace("session-", "");
        var sessionMessageCount = int.TryParse(sessionNumber, out var num) ? Math.Min(num * 2, 10) : 2;
        
        return Enumerable.Range(1, sessionMessageCount).Select((i, index) => new ChatMessage
        {
            Id = Guid.NewGuid().ToString(),
            Content = index % 2 == 0 
                ? $"这是会话 {sessionNumber} 中的第 {i} 条用户消息" 
                : $"这是会话 {sessionNumber} 中的第 {i} 条AI回复消息",
            IsUser = index % 2 == 0,
            Timestamp = DateTime.Now.AddMinutes(-sessionMessageCount + i),
            SessionId = sessionId
        }).ToList();
    }

    private async Task DeleteSessionFromDatabase(string sessionId)
    {
        await Task.Delay(100);
    }

    private async Task SaveUserPreference(string key, object value)
    {
        await Task.Delay(50);
        // 这里可以保存到数据库或其他持久化存储
    }

    private async Task UpdateAiModelConfiguration(string modelId)
    {
        await Task.Delay(100);
    }

    private async Task UpdateAiTemperatureConfiguration(double temperature)
    {
        await Task.Delay(100);
    }
}

















